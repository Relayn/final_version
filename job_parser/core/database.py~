import sqlite3
from sqlite3 import Error
import os
from typing import Any


def get_db_path():
    """Возвращает путь к базе данных."""
    # Получаем абсолютный путь к директории парсеров
    base_dir = os.path.dirname(os.path.abspath(__file__))
    # Формируем путь к базе данных
    db_path = os.path.join(base_dir, '..', 'parsers', 'vacancies.db')
    return db_path

def create_connection() -> Any:
    """Создает соединение с базой данных SQLite."""
    conn = None
    try:
        conn = sqlite3.connect(get_db_path())  # Используем правильный путь к базе данных
        return conn
    except Error as e:
        print(f"Error of creating connection: {e}")  # Выводим сообщение об ошибке в консоль
    return conn

def initialize_database() -> None:
    """Инициализирует базу данных и создает таблицы."""
    conn = create_connection()
    if conn is not None:
        create_table(conn)
        conn.close()
    else:
        print("Error! cannot create the database connection.")

def create_table(conn) -> None:
    """Создает таблицу для хранения вакансий."""
    try:
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS vacancies (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                title TEXT NOT NULL,
                company TEXT NOT NULL,
                location TEXT NOT NULL,
                salary TEXT,
                description TEXT,
                published_at DATETIME NOT NULL,
                source TEXT NOT NULL,
                UNIQUE(title, company, published_at)
            )
        ''')
        conn.commit()
    except Error as e:
        print(f"Error of creating table: {e}")  # Выводим сообщение об ошибке в консоль

def insert_vacancy(vacancy) -> None:
    """Добавляет вакансию в базу данных."""
    conn = create_connection()
    sql = '''INSERT OR IGNORE INTO vacancies (title, company, location, salary, description, published_at, source)
     VALUES (?, ?, ?, ?, ?, ?, ?)'''
    param = (
                vacancy.title, vacancy.company, vacancy.location, vacancy.salary,
                vacancy.description, vacancy.published_at.isoformat(), vacancy.source
            )
    try:
        cursor = conn.cursor()
        cursor.execute(sql, param)
        conn.commit()
    except Error as e:
        print(f"Error of inserting vacancy: {e}")  # Выводим сообщение об ошибке в консоль
        # логирование

    finally:
        conn.close()

def get_all_vacancies(page: int = 1, per_page: int = 10) -> list:
    """Получает все вакансии из базы данных с поддержкой пагинации."""
    conn = create_connection()
    vacancies = []
    try:
        cursor = conn.cursor()
        offset = (page - 1) * per_page
        cursor.execute("SELECT * FROM vacancies LIMIT ? OFFSET ?", (per_page, offset))
        rows = cursor.fetchall()
        
        for row in rows:
            vacancy = {
                'id': row[0],
                'title': row[1],
                'company': row[2],
                'location': row[3],
                'salary': row[4],
                'description': row[5],
                'published_at': row[6],
                'source': row[7]
            }
            vacancies.append(vacancy)
    except Error as e:
        print(f"Error of getting all vacancies: {e}")
    finally:
        conn.close()

    return vacancies

def search_vacancies(query: str) -> list:
    """Ищет вакансии по заданному запросу."""
    conn = create_connection()
    vacancies = []
    try:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM vacancies WHERE title LIKE ? OR company LIKE ? OR location LIKE ?", 
                       ('%' + query + '%', '%' + query + '%', '%' + query + '%'))
        rows = cursor.fetchall()

        for row in rows:
            vacancy = {
                'id': row[0],
                'title': row[1],
                'company': row[2],
                'location': row[3],
                'salary': row[4],
                'description': row[5],
                'published_at': row[6],
                'source': row[7]
            }
            vacancies.append(vacancy)
    except Error as e:
        print(f"Error of searching vacancies: {e}")
    finally:
        conn.close()

    return vacancies

def remove_duplicates() -> None:
    """Удаляет повторяющиеся записи из таблицы vacancies."""
    conn = create_connection()
    if conn is not None:
        try:
            cursor = conn.cursor()
            cursor.execute('''
                DELETE FROM vacancies
                WHERE id NOT IN (
                    SELECT MIN(id)
                    FROM vacancies
                    GROUP BY title, company, published_at
                );
            ''')
            conn.commit()
            print("Дубликаты удалены успешно.")
        except Error as e:
            print(f"Ошибка при удалении дубликатов: {e}")
        finally:
            conn.close()
    else:
        print("Ошибка: не удалось подключиться к базе данных.")

if __name__ == "__main__":
    # all_vacancies = get_all_vacancies()
    # searching_vacancies = search_vacancies("Junior")
    #
    # for index, vacancy in enumerate(searching_vacancies, start=1):
    #     if index > 10:
    #         break
    #     print(vacancy)
    remove_duplicates()